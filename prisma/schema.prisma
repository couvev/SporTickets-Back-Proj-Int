generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_BOUNCER")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  document     String?
  documentType String?
  name         String?
  email        String    @unique
  password     String
  phone        String?
  gender       String?
  role         Role      @default(USER)
  bornAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  siteUrl     String?
  logoUrl     String?
  fantasyName String?

  tickets Ticket[] @relation("UserTickets")
  Event   Event[]
}

enum Role {
  MASTER
  ADMIN
  PARTNER
  USER
}

model Event {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  name           String
  place          String
  title          String
  description    String
  regulation     String
  additionalInfo String
  bannerUrl      String
  endDate        DateTime
  startDate      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  bracketId String  @db.Uuid
  bracket   Bracket @relation(fields: [bracketId], references: [id])

  ticketTypes TicketType[]
  coupons     Coupon[]
}

model TicketType {
  id      String @id @default(uuid()) @db.Uuid
  eventId String @db.Uuid
  event   Event  @relation(fields: [eventId], references: [id])

  name        String
  restriction String
  userType    String
  description String
  mode        String

  tickets            Ticket[]
  categories         Category[]
  personalizedFields PersonalizedFields[]
  ticketLots         TicketLot[]
}

model Ticket {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation("UserTickets", fields: [userId], references: [id])

  ticketTypeId String     @db.Uuid
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  price Float

  transactionId String      @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  couponId String? @db.Uuid
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id         String @id @default(uuid()) @db.Uuid
  status     String
  totalValue Float

  tickets Ticket[]
}

model Coupon {
  id      String @id @default(uuid()) @db.Uuid
  eventId String @db.Uuid
  event   Event  @relation(fields: [eventId], references: [id])

  name       String
  percentage Float
  quantity   Int
  deletedAt  DateTime?

  tickets Ticket[]
}

model Bracket {
  id       String  @id @default(uuid()) @db.Uuid
  url      String
  isActive Boolean
  nome     String

  events Event[]
}

model Category {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String     @db.Uuid
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  title       String
  description String
  quantity    Int
}

model PersonalizedFields {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String     @db.Uuid
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  type         String
  requestTitle String
  answer       String
  optionsList  String
}

model TicketLot {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String     @db.Uuid
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  name      String
  price     Float
  quantity  Int
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
