generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PGBOUNCER")
}

model User {
  id              String       @id @default(uuid()) @db.Uuid
  email           String       @unique
  phone           String?      @unique
  document        String       @unique
  documentType    DocumentType @default(CPF)
  name            String
  password        String
  sex             Sex          @default(FEMALE)
  role            Role         @default(USER)
  bornAt          DateTime?
  cep             String?
  profileImageUrl String?
  siteUrl         String?
  logoUrl         String?
  fantasyName     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  tickets Ticket[]
  events  Event[]

  eventDashboardAccess EventDashboardAccess[]
  Coupon               Coupon[]
  transactions         Transaction[]
}

model Event {
  id             String        @id @default(uuid()) @db.Uuid
  createdBy      String        @db.Uuid
  slug           String?       @unique
  status         EventStatus   @default(DRAFT)
  type           EventType     @default(GENERAL)
  level          EventLevel    @default(GENERAL)
  name           String?
  place          String?
  description    String?
  regulation     String?
  additionalInfo String?
  bannerUrl      String?
  smallImageUrl  String?
  endDate        DateTime?
  startDate      DateTime?
  address        AddressEvent?
  eventFee       Decimal?      @db.Decimal(10, 2)

  allowIndividualTickets Boolean @default(false)
  allowFullTickets       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [createdBy], references: [id])

  paymentMethods       PaymentMethod[]
  ticketTypes          TicketType[]
  coupons              Coupon[]
  eventDashboardAccess EventDashboardAccess[]
  bracket              Bracket[]
  ranking              Ranking[]
  terms                Term[]
}

model Term {
  id           String  @id @default(uuid()) @db.Uuid
  eventId      String  @db.Uuid
  title        String
  isObligatory Boolean
  fileUrl      String

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  event                  Event                    @relation(fields: [eventId], references: [id])
  TermTicketConfirmation TermTicketConfirmation[]
}

model TermTicketConfirmation {
  id          String   @id @default(uuid()) @db.Uuid
  termId      String   @db.Uuid
  ticketId    String   @db.Uuid
  confirmedAt DateTime @default(now())

  term   Term   @relation(fields: [termId], references: [id])
  ticket Ticket @relation(fields: [ticketId], references: [id])

  @@unique([termId, ticketId])
}

model Transaction {
  id          String            @id @default(uuid()) @db.Uuid
  status      TransactionStatus @default(PENDING)
  totalValue  Decimal           @db.Decimal(10, 2)
  createdById String            @db.Uuid
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  paymentMethod     String?
  externalPaymentId String?
  externalStatus    String?
  paymentProvider   PaymentProvider?
  paidAt            DateTime?
  refundedAt        DateTime?
  cancelledAt       DateTime?
  pixQRCode         String?
  response          Json?

  tickets   Ticket[]
  createdBy User     @relation(fields: [createdById], references: [id])
}

model Coupon {
  id           String    @id @default(uuid()) @db.Uuid
  eventId      String    @db.Uuid
  createdBy    String    @db.Uuid
  name         String
  percentage   Decimal   @db.Decimal(10, 2)
  quantity     Int
  soldQuantity Int       @default(0)
  isActive     Boolean?
  deletedAt    DateTime?

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [createdBy], references: [id])

  tickets Ticket[]

  @@index([deletedAt])
}

model Ticket {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  transactionId String    @db.Uuid
  ticketLotId   String    @db.Uuid
  categoryId    String?   @db.Uuid
  couponId      String?   @db.Uuid
  price         Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  code          String?   @unique
  deliveredAt   DateTime?

  user        User        @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
  ticketLot   TicketLot   @relation(fields: [ticketLotId], references: [id])
  category    Category?   @relation("TicketToCategory", fields: [categoryId], references: [id])
  coupon      Coupon?     @relation(fields: [couponId], references: [id])

  personalizedFieldAnswers PersonalizedFieldAnswer[]
  teamId                   String?                   @db.Uuid
  team                     Team?                     @relation(fields: [teamId], references: [id])
  TermTicketConfirmation   TermTicketConfirmation[]
}

model Team {
  id      String   @id @default(uuid()) @db.Uuid
  tickets Ticket[]
}

model Bracket {
  id       String  @id @default(uuid()) @db.Uuid
  eventId  String  @db.Uuid
  name     String
  url      String
  isActive Boolean

  event Event @relation(fields: [eventId], references: [id])
}

model Ranking {
  id       String  @id @default(uuid()) @db.Uuid
  eventId  String  @db.Uuid
  name     String
  url      String
  isActive Boolean

  event Event @relation(fields: [eventId], references: [id])
}

model Category {
  id           String      @id @default(uuid()) @db.Uuid
  ticketTypeId String      @db.Uuid
  title        String
  restriction  Restriction @default(NONE)
  quantity     Int
  soldQuantity Int         @default(0)
  deletedAt    DateTime?

  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])

  tickets Ticket[] @relation("TicketToCategory")
}

model TicketType {
  id          String    @id @default(uuid()) @db.Uuid
  eventId     String    @db.Uuid
  name        String
  description String
  userType    UserType  @default(ATHLETE)
  teamSize    Int       @default(1)
  deletedAt   DateTime?

  event Event @relation(fields: [eventId], references: [id])

  categories         Category[]
  personalizedFields PersonalizedField[]
  ticketLots         TicketLot[]
}

model PersonalizedField {
  id           String    @id @default(uuid()) @db.Uuid
  ticketTypeId String    @db.Uuid
  type         String
  requestTitle String
  optionsList  Json?
  deletedAt    DateTime?

  ticketType TicketType                @relation(fields: [ticketTypeId], references: [id])
  answers    PersonalizedFieldAnswer[]
}

model PersonalizedFieldAnswer {
  id                  String @id @default(uuid()) @db.Uuid
  personalizedFieldId String @db.Uuid
  ticketId            String @db.Uuid
  answer              String

  personalizedField PersonalizedField @relation(fields: [personalizedFieldId], references: [id])
  ticket            Ticket            @relation(fields: [ticketId], references: [id])
}

model TicketLot {
  id           String    @id @default(uuid()) @db.Uuid
  ticketTypeId String    @db.Uuid
  name         String
  price        Decimal   @db.Decimal(10, 2)
  quantity     Int       @default(0)
  soldQuantity Int       @default(0)
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  tickets    Ticket[]
}

model EventDashboardAccess {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @db.Uuid
  eventId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model AddressEvent {
  id           String  @id @default(uuid()) @db.Uuid
  eventId      String  @unique @db.Uuid
  zipCode      String
  street       String?
  complement   String?
  number       String?
  neighborhood String?
  city         String?
  state        String?
  event        Event   @relation(fields: [eventId], references: [id])
}

enum Role {
  MASTER
  ADMIN
  PARTNER
  USER
}

enum Sex {
  MALE
  FEMALE
}

enum DocumentType {
  CPF
}

enum EventStatus {
  DRAFT
  REGISTRATION
  PROGRESS
  CANCELLED
  FINISHED
}

enum EventType {
  FUTVOLEI
  BEACH_TENIS
  ALTINHA
  FUTEBOL
  FUTEBOL_ARREIA
  FUTSAL
  VOLEI
  GENERAL
  CORRIDA
}

enum EventLevel {
  BEGINNER
  AMATEUR
  SEMIPROFESSIONAL
  PROFESSIONAL
  GENERAL
}

enum TransactionStatus {
  PENDING
  APPROVED
  AUTHORIZED
  IN_PROCESS
  IN_MEDIATION
  REJECTED
  CANCELLED
  REFUNDED
  CHARGED_BACK
}

enum Restriction {
  NONE
  SAME_CATEGORY
}

enum UserType {
  ATHLETE
  VIEWER
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BOLETO
  FREE
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MERCADOPAGO
}
