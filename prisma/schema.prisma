generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_BOUNCER")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  document     String
  documentType String
  name         String
  email        String   @unique
  passwordHash String
  phone        String
  gender       String
  role         String
  bornAt       DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events String

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  tickets Ticket[] @relation("UserTickets")

  partnerTickets Ticket[] @relation("PartnerTickets")
}

model Company {
  id          String @id @default(uuid()) @db.Uuid
  siteUrl     String
  logoUrl     String
  fantasyName String

  users  User[]
  events Event[]
}

model Event {
  id        String  @id @default(uuid()) @db.Uuid
  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  name           String
  place          String
  title          String
  description    String
  regulation     String
  additionalInfo String
  bannerUrl      String
  endDate        DateTime
  startDate      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  switchId String
  bracket  Bracket @relation(fields: [switchId], references: [id])

  ticketTypes TicketType[]
  coupons     Coupon[]
}

model TicketType {
  id      String @id @default(uuid()) @db.Uuid
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  name        String
  restriction String
  userType    String
  description String
  mode        String

  tickets            Ticket[]
  categories         Category[]
  personalizedFields PersonalizedFields[]
  ticketLots         TicketLot[]
}

model Ticket {
  id String @id @default(uuid()) @db.Uuid

  userId String
  user   User   @relation("UserTickets", fields: [userId], references: [id])

  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  price Float

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  partnerId String?
  partner   User?   @relation("PartnerTickets", fields: [partnerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])
}

model Transaction {
  id         String @id @default(uuid()) @db.Uuid
  status     String
  totalValue Float

  tickets Ticket[]
}

model Coupon {
  id String @id @default(uuid()) @db.Uuid

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  name       String
  percentage Float
  quantity   Int
  deletedAt  DateTime?

  tickets Ticket[]
}

model Bracket {
  id       String  @id @default(uuid()) @db.Uuid
  url      String
  isActive Boolean
  nome     String

  events Event[]
}

model Category {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  title       String
  description String
  quantity    Int
}

model PersonalizedFields {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  type         String
  requestTitle String
  answer       String
  optionsList  String
}

model TicketLot {
  id           String     @id @default(uuid()) @db.Uuid
  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  name      String
  price     Float
  quantity  Int
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
